# name: Trues-App Docker CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-test-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Login to Docker Hub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and Push Docker image
#         uses: docker/build-push-action@v2
#         with:
#           context: .
#           push: true
#           tags: abmushfiq/trues_test1_fe:${{ github.sha }}

#       - name: Deploy to EC2 instance
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.EC2_PRIVATE_KEY }}
#           script: |
#             docker stop trues_test1_fe || true
#             docker rm trues_test1_fe || true
#             docker pull ${{ secrets.DOCKER_USERNAME }}/trues_test1_fe:${{ github.sha }}
#             docker run -d --name trues_test1_fe -p 80:80 ${{ secrets.DOCKER_USERNAME }}/trues_test1_fe:${{ github.sha }}



# name: Build and Push Docker Image

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: 14

#       - name: Install dependencies
#         run: npm install

#       - name: Build React app
#         run: npm run build

# name: Deploy to EC2

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Build and Deploy
#         env:
#           REMOTE_USER: ${{ secrets.EC2_USERNAME }}
#           REMOTE_HOST: ${{ secrets.EC2_HOST }}
#           REMOTE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
#         run: |
#           ssh -i $REMOTE_KEY $REMOTE_USER@$REMOTE_HOST 'bash -s' << EOF
#             docker cp ./build/. CONTAINER_ID:/usr/share/nginx/html/
#             docker restart CONTAINER_ID
#           EOF

# name: Deploy to EC2 Nginx

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: 14

#       - name: Install dependencies
#         run: npm install

#       - name: Build React app
#         run: npm run build

#       # - name: Deploy to EC2
#       #   env:
#       #     REMOTE_USER: ${{ secrets.EC2_USERNAME }}
#       #     REMOTE_HOST: ${{ secrets.EC2_HOST }}
#       #     REMOTE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
#       #     CONTAINER_ID: "348b70df3708" # Update with your actual container ID
#       #   run: |
#       #     rsync -rav --delete-after --quiet -e "ssh -i $REMOTE_KEY" ./build/ $REMOTE_USER@$REMOTE_HOST:/usr/share/nginx/html/
#       #     ssh -i $REMOTE_KEY $REMOTE_USER@$REMOTE_HOST "docker restart $CONTAINER_ID"

#       - name: Deploy to EC2
#       env:
#         REMOTE_USER: ${{ secrets.EC2_USERNAME }}
#         REMOTE_HOST: ${{ secrets.EC2_HOST }}
#         REMOTE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
#         CONTAINER_ID: "348b70df3708" # Update with your actual container ID
#       run: |
#           # Store the private key in a temporary file
#           echo -n "$REMOTE_KEY" > ssh_key.pem
#           chmod 600 ssh_key.pem

#     # Copy the build folder to the remote server
#           rsync -rav --delete-after --quiet -e "ssh -i ssh_key.pem" ./build/ $REMOTE_USER@$REMOTE_HOST:/usr/share/nginx/html/

#     # Restart the Docker container
#           ssh -i ssh_key.pem $REMOTE_USER@$REMOTE_HOST "docker restart $CONTAINER_ID"

#     # Clean up the temporary private key file
#     rm -f ssh_key.pem


name: Deploy to EC2 Nginx

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm install

      - name: Build React app
        run: npm run build

      - name: Deploy to EC2
        env:
          REMOTE_USER: ${{ secrets.EC2_USERNAME }}
          REMOTE_HOST: ${{ secrets.EC2_HOST }}
          REMOTE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          CONTAINER_ID: "57fd1cd4c755" # Update with your actual container ID
        run: |

          # Store the private key in a temporary file
          echo -n "$REMOTE_KEY" > ssh_key.pem
          chmod 700 ssh_key.pem

           # Create the ~/.ssh directory if it doesn't exist
          mkdir -p ~/.ssh

          # Add remote host's SSH fingerprint to known_hosts
          ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts

          # Copy the build folder to the remote server
          # rsync -rav --delete-after --quiet -e "ssh -i ssh_key.pem" ./build/ $REMOTE_USER@$REMOTE_HOST:/usr/share/nginx/html/

          # temp try
          rsync -rav --delete-after --quiet -e "ssh -i ssh_key.pem" ./build/ $REMOTE_USER@$REMOTE_HOST:/remote-trues/
          

          # Restart the Docker container
          ssh -i ssh_key.pem $REMOTE_USER@$REMOTE_HOST "docker restart $CONTAINER_ID"

          # Clean up the temporary private key file
          rm -f ssh_key.pem




